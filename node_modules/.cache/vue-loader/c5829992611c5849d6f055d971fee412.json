{"remainingRequest":"/Users/zhangxiaoning/Desktop/wisdom-security-syste/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangxiaoning/Desktop/wisdom-security-syste/src/components/wisdom-echarts-frame/index.vue?vue&type=style&index=0&id=6e52b4e1&lang=scss&scoped=true&","dependencies":[{"path":"/Users/zhangxiaoning/Desktop/wisdom-security-syste/src/components/wisdom-echarts-frame/index.vue","mtime":1622107239000},{"path":"/Users/zhangxiaoning/Desktop/wisdom-security-syste/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangxiaoning/Desktop/wisdom-security-syste/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/zhangxiaoning/Desktop/wisdom-security-syste/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/zhangxiaoning/Desktop/wisdom-security-syste/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangxiaoning/Desktop/wisdom-security-syste/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangxiaoning/Desktop/wisdom-security-syste/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi53aXNkb21FY2hhcnRzRnJhbWUgewogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0JA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/wisdom-echarts-frame","sourcesContent":["<template>\n  <div class=\"wisdomEchartsFrame\"\n       ref=\"wisdomEchartsFrame\"></div>\n</template>\n\n<script>\nimport echarts from 'echarts'\nexport default {\n  name: 'wisdom-echarts-frame',\n  data () {\n    return {\n      myChart: ''\n    }\n  },\n  props: {\n    chartMethod: {\n      type: Function\n    }\n  },\n  mounted () {\n    this.initChart()\n    window.onresize = () => {\n      this.myChart.resize()\n    }\n  },\n  beforeDestroy () {\n    // 销毁echarts实例对象\n    if (this.myChart) this.myChart.dispose()\n  },\n  watch: {},\n  methods: {\n    initChart () {\n      this.$nextTick(() => {\n        const dom = this.$refs.wisdomEchartsFrame\n        this.myChart = echarts.init(dom)\n        // this.myChart.setOption(this.chartMethod())\n        this.$emit('myChartMethod', this.myChart)\n      })\n    },\n    // 配置option\n    setOption (option) {\n      this.myChart.setOption(option)\n    },\n    // 获取option\n    getOption () {\n      if (this.myChart) {\n        return this.myChart.getOption()\n      } else {\n        return null\n      }\n    },\n    //\n    resize () {\n      if (this.myChart) {\n        this.myChart.resize()\n      }\n    },\n    clear () {\n      if (this.myChart) {\n        this.myChart.clear()\n      }\n    },\n    showLoading () {\n      if (this.myChart) {\n        this.$nextTick(() => {\n          this.myChart.showLoading({\n            text: '',\n            color: '#29cdff',\n            textColor: '#29cdff',\n            maskColor: 'rgba(255, 255, 255, 0)',\n            zlevel: 0\n          })\n        })\n      }\n    },\n    hideLoading () {\n      if (this.myChart) {\n        this.myChart.hideLoading()\n      }\n    },\n    // 启动动画时使用\n    tooltipAnimate (chart, length) {\n      // 清除上一次动画\n      this.timeTicket && clearInterval(this.timeTicket)\n      const count = 0\n      // 启动动画\n      this._action(chart, count, length)\n      chart && // 移除动画\n        chart.on('mouseover', params => {\n          this._cleanAction(chart, params)\n        })\n      // 重写启动动画\n      chart &&\n        chart.on('mouseout', () => {\n          this._action(chart, count, length)\n        })\n    },\n    // tooltip动画action\n    _action (chart, count, length) {\n      this.timeTicket && clearInterval(this.timeTicket)\n      this.timeTicket = setInterval(() => {\n        if (!chart) {\n          clearInterval(this.timeTicket)\n          return\n        }\n        chart &&\n          chart.dispatchAction({\n            type: 'downplay',\n            seriesIndex: 0\n          })\n        chart &&\n          chart.dispatchAction({\n            type: 'highlight',\n            seriesIndex: 0,\n            dataIndex: count % length\n          })\n        chart &&\n          chart.dispatchAction({\n            type: 'showTip',\n            seriesIndex: 0,\n            dataIndex: count % length\n          })\n        count++\n      }, 1000 * 3)\n    },\n    _cleanAction (chart, params) {\n      this.timeTicket && clearInterval(this.timeTicket)\n      if (!chart) {\n        clearInterval(this.timeTicket)\n        return\n      }\n      chart &&\n        chart.dispatchAction({\n          type: 'downplay',\n          seriesIndex: 0\n        })\n      chart &&\n        chart.dispatchAction({\n          type: 'highlight',\n          seriesIndex: 0,\n          dataIndex: params.dataIndex\n        })\n      chart &&\n        chart.dispatchAction({\n          type: 'showTip',\n          seriesIndex: 0,\n          dataIndex: params.dataIndex\n        })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.wisdomEchartsFrame {\n  width: 100%;\n  height: 100%;\n}\n</style>\n"]}]}